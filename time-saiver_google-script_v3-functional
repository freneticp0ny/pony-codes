// === CONFIGURATION ===
const CONFLUENCE_BASE_URL = "https://jobber.atlassian.net/wiki";
const CONFLUENCE_API_EMAIL = "aranea.s@getjobber.com";
const CONFLUENCE_API_TOKEN = "ATATT3xFfGF08IdH_ltX0lOmogXSowKxbDX9m0xgIEr3cNAwcT-uNHvG1dt6LADZkhYhYQ3Ke3dQBr4ET4HLNkwrUNDdjUMcu8L7x9EMW-lK0Nz4uD7aUt5GsFXk8UYplFBJhLkgKEpo3coqCpIRPRFEVwPUwNzeeAYa4Bp5iovk1EDyzvhPLCI=C1CC585E"; // Replace securely
const TEMPLATE_PAGE_ID = "3685449814";
const PARENT_PAGE_ID = "3676176522";
const SPACE_KEY = "SEC";
const SHEET_ID = "1ilTDUBqnNee_lq949_InvDsRbMjW-Uj4Zl1VCD1K6JE"; // Replace with your Sheet ID
const SHEET_NAME = "Form Responses";

// === MAIN FUNCTION ===
function generateMonthlyConfluencePage() {
  // if (!isLastFridayOfMonth()) return;

  const monthName = new Date().toLocaleString('default', { month: 'long' });
  const newTitle = `Time S(Ai)ver Summary - ${monthName}`;

  const metrics = getSheetMetrics();
  const getUrl = `${CONFLUENCE_BASE_URL}/rest/api/content/${TEMPLATE_PAGE_ID}?expand=body.storage`;
  const authHeader = "Basic " + Utilities.base64Encode(CONFLUENCE_API_EMAIL + ":" + CONFLUENCE_API_TOKEN);

  const getOptions = {
    method: "get",
    contentType: "application/json",
    headers: { Authorization: authHeader },
    muteHttpExceptions: true,
  };

  const getResponse = UrlFetchApp.fetch(getUrl, getOptions);
  const getCode = getResponse.getResponseCode();
  if (getCode !== 200) {
    Logger.log("Failed to fetch template. Status: " + getCode);
    Logger.log(getResponse.getContentText());
    return;
  }

  let content = JSON.parse(getResponse.getContentText()).body.storage.value;

  // Replace placeholders
  content = content
    .replace("[TOTAL_ENTRIES]", metrics.totalEntries)
    .replace("[TOTAL_TIME_SPENT]", metrics.totalTimeSpent.toFixed(1))
    .replace("[TOTAL_TIME_SAVED]", metrics.totalTimeSaved.toFixed(1))
    .replace("[MOST_USED_TOOL]", metrics.mostUsedTool)
    .replace("[TIME_SAVED]", metrics.timeSavedCount)
    .replace("[MANUAL_WORK_NEEDED]", metrics.manualWorkCount)
    .replace("[NOT_USEFUL]", metrics.notUsefulCount)
    .replace("[REASONS_MANUAL_WORK]", metrics.manualWorkReasons.map(r => `• ${r}`).join("<br>"))
    .replace("[NOTES_LEARNINGS]", metrics.notesLearned.map(n => `• ${n}`).join("<br>"));

  const payload = {
    type: "page",
    title: newTitle,
    space: { key: SPACE_KEY },
    ancestors: [{ id: PARENT_PAGE_ID }],
    body: {
      storage: {
        value: content,
        representation: "storage"
      }
    }
  };

  const postUrl = `${CONFLUENCE_BASE_URL}/rest/api/content`;
  const postOptions = {
    method: "post",
    contentType: "application/json",
    headers: { Authorization: authHeader },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };

  const postResponse = UrlFetchApp.fetch(postUrl, postOptions);
  Logger.log("POST status: " + postResponse.getResponseCode());
  Logger.log(postResponse.getContentText());
}

// === GOOGLE SHEET METRICS FUNCTION ===
function getSheetMetrics() {
  const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName(SHEET_NAME);
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const rows = data.slice(1);

  const col = name => headers.indexOf(name);

  const totalEntries = rows.length;
  const totalTimeSpent = rows.reduce((sum, row) => sum + parseFloat(row[col("Time Spent Building/Using")] || 0), 0);
  const totalTimeSaved = rows.reduce((sum, row) => sum + parseFloat(row[col("Estimated Time Saved")] || 0), 0);

  const toolCount = {};
  rows.forEach(row => {
    const tool = row[col("AI Tool")];
    if (tool) toolCount[tool] = (toolCount[tool] || 0) + 1;
  });
  const mostUsedTool = Object.entries(toolCount).reduce((a, b) => b[1] > a[1] ? b : a, ["", 0])[0];

  const outcomeCol = col("Outcome");
  const reasonCol = col("If you chose 'Manual Work Needed', tell us why");
  const notesCol = col("Notes/Learnings");

  const timeSavedCount = rows.filter(row => (row[outcomeCol] || "").includes("Time Saved")).length;
  const manualWorkCount = rows.filter(row => (row[outcomeCol] || "").includes("Manual Work")).length;
  const notUsefulCount = rows.filter(row => (row[outcomeCol] || "").includes("Not Useful")).length;

  const manualWorkReasons = rows.map(row => row[reasonCol]).filter(Boolean);
  const notesLearned = rows.map(row => row[notesCol]).filter(Boolean);

  return {
    totalEntries,
    totalTimeSpent,
    totalTimeSaved,
    mostUsedTool,
    timeSavedCount,
    manualWorkCount,
    notUsefulCount,
    manualWorkReasons,
    notesLearned
  };
}

// === OPTIONAL SCHEDULING FUNCTION ===
function isLastFridayOfMonth(date = new Date()) {
  const day = date.getDay(); // 5 = Friday
  const month = date.getMonth();
  const nextWeek = new Date(date);
  nextWeek.setDate(date.getDate() + 7);
  return day === 5 && nextWeek.getMonth() !== month;
}
