// === CONFIGURATION ===
const CONFLUENCE_BASE_URL = "https://jobber.atlassian.net/wiki"; // Replace with your Confluence URL
const CONFLUENCE_SPACE_ID = "903544834"; // Replace with your space's numeric ID
const CONFLUENCE_PARENT_PAGE_ID = "3676176522"; // Replace with parent page ID
const CONFLUENCE_API_EMAIL = "aranea.s@getjobber.com"; // Your Atlassian email
const CONFLUENCE_API_TOKEN = " "; // Your API token

// === MAIN FUNCTION ===
function generateAndPushMonthlySummary() {
  // if (!isLastFridayOfMonth()) return;

  const sheet = SpreadsheetApp.getActiveSpreadsheet();
  const dataSheet = sheet.getSheetByName("Form Responses");
  const summarySheet = sheet.getSheetByName("Monthly Summary");

  const data = dataSheet.getDataRange().getValues();
  const headers = data[0];
  const rows = data.slice(1);

  const thisMonth = new Date().getMonth();
  const filtered = rows.filter(row => {
    const date = new Date(row[headers.indexOf("Timestamp")]);
    return date.getMonth() === thisMonth;
  });

  if (filtered.length === 0) return;

  const toolCol = headers.indexOf("AI Tool");
  const outcomeCol = headers.indexOf("Outcome");
  const usedAICol = headers.indexOf("Final output used any AI content?");
  const timeSavedCol = headers.indexOf("Estimated Time Saved");

  const mostCommon = arr =>
    arr.filter(Boolean).reduce((acc, val) => {
      acc[val] = (acc[val] || 0) + 1;
      return acc;
    }, {});

  const totalTimeSaved = filtered.reduce((sum, row) => {
    const val = parseFloat(row[timeSavedCol]);
    return sum + (isNaN(val) ? 0 : val);
  }, 0);

  const toolsUsed = mostCommon(filtered.map(row => row[toolCol]));
  const aiUsed = filtered.filter(row =>
    ["Yes", "Partially"].includes(row[usedAICol])
  ).length;

  const manualWork = filtered.filter(row =>
    row[outcomeCol] === "Manual Work Needed"
  ).length;

  const mostUsedTool = Object.entries(toolsUsed).sort((a, b) => b[1] - a[1])[0]?.[0] || "";

  // Write to Monthly Summary tab (for record keeping)
  summarySheet.getRange("B1").setValue(filtered.length);
  summarySheet.getRange("B2").setValue((totalTimeSaved / 60).toFixed(1));
  summarySheet.getRange("B3").setValue(mostUsedTool);
  summarySheet.getRange("B4").setValue(manualWork);
  summarySheet.getRange("B5").setValue(aiUsed);

  // Prepare Confluence page content
  const monthName = new Date().toLocaleString('default', { month: 'long' });
  const content = `
<h3>Overview</h3>
<p>This page captures time saved, blockers, and insights related to our use of AI during the month of ${monthName}. It will be reviewed at our Focus FridAI Sup. Bring your notes!</p>

<h3>Time S(Ai)ver Retrospective</h3>
<ul>
  <li><strong>Department:</strong> </li>
  <li><strong>Participants:</strong> </li>
  <li><strong>Date:</strong> ${new Date().toLocaleDateString()}</li>
  <li><strong>Estimated Time Saved:</strong> ${(totalTimeSaved / 60).toFixed(1)} hour(s)</li>
  <li><strong>Most-Used Tool:</strong> ${mostUsedTool}</li>
  <li><strong>Manual Work Required:</strong> ${manualWork} hour(s)</li>
  <li><strong>AI Outputs Used:</strong> ${aiUsed}</li>
  <li><strong>Total Entries:</strong> ${filtered.length}</li>
</ul>

<h3>Roadblocks</h3>
<ul>
  <li><strong>Challenges:</strong> </li>
  <li><strong>Blockers:</strong> </li>
</ul>

<h3>Action items</h3>
<p>
  <ac:task>
    <ac:task-status>incomplete</ac:task-status>
    <ac:task-body>[ Add action item ]</ac:task-body>
    <ac:task-assignee></ac:task-assignee>
  </ac:task>
</p>
`;

  const url = `${CONFLUENCE_BASE_URL}/api/v2/pages`;
  const payload = {
    spaceId: CONFLUENCE_SPACE_ID,
    status: "current",
    title: `Time S(Ai)ver Summary - ${monthName} (${new Date().toLocaleTimeString()})`,
    parentId: CONFLUENCE_PARENT_PAGE_ID,
    body: {
      representation: "storage",
      value: content
    }
  };

  const options = {
    method: "post",
    contentType: "application/json",
    headers: {
      Authorization: "Basic " + Utilities.base64Encode(CONFLUENCE_API_EMAIL + ":" + CONFLUENCE_API_TOKEN)
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch(url, options);
  Logger.log(response.getContentText());
}

// === HELPER FUNCTION: Last Friday Checker ===
function isLastFridayOfMonth(date = new Date()) {
  const day = date.getDay(); // 5 = Friday
  const month = date.getMonth();
  const nextWeek = new Date(date);
  nextWeek.setDate(date.getDate() + 7);
  return day === 5 && nextWeek.getMonth() !== month;
}
