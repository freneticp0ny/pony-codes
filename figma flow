import React, { useState } from 'react';
import { Card } from './ui/card';
import { Badge } from './ui/badge';
import { Button } from './ui/button';
import { ArrowDown, ArrowRight, MessageCircle, Bot, Shield, CheckCircle, XCircle, Edit3, Trash2 } from 'lucide-react';

interface FlowStepProps {
  title: string;
  description: string;
  type: 'start' | 'process' | 'decision' | 'end';
  variant?: 'default' | 'warning' | 'success' | 'destructive';
  icon?: React.ReactNode;
  children?: React.ReactNode;
}

function FlowStep({ title, description, type, variant = 'default', icon, children }: FlowStepProps) {
  const getColors = () => {
    switch (variant) {
      case 'warning': return 'border-yellow-300 bg-yellow-50';
      case 'success': return 'border-green-300 bg-green-50';
      case 'destructive': return 'border-red-300 bg-red-50';
      default: return 'border-blue-300 bg-blue-50';
    }
  };

  const getShape = () => {
    if (type === 'decision') return 'transform rotate-45 w-32 h-32';
    return 'w-full';
  };

  return (
    <div className="flex flex-col items-center">
      <Card className={`p-4 ${getColors()} border-2 transition-all hover:shadow-lg ${getShape()}`}>
        <div className={type === 'decision' ? 'transform -rotate-45 text-center' : 'text-center'}>
          <div className="flex items-center justify-center mb-2">
            {icon && <span className="mr-2">{icon}</span>}
            <h3 className="font-semibold text-sm">{title}</h3>
          </div>
          <p className="text-xs text-gray-600">{description}</p>
        </div>
      </Card>
      {children}
    </div>
  );
}

function Arrow({ direction = 'down', label }: { direction?: 'down' | 'right' | 'left'; label?: string }) {
  const getIcon = () => {
    switch (direction) {
      case 'right': return <ArrowRight className="w-6 h-6 text-gray-600" />;
      case 'left': return <ArrowRight className="w-6 h-6 text-gray-600 rotate-180" />;
      default: return <ArrowDown className="w-6 h-6 text-gray-600" />;
    }
  };

  return (
    <div className="flex flex-col items-center my-4">
      {getIcon()}
      {label && (
        <Badge variant="secondary" className="mt-1 text-xs">
          {label}
        </Badge>
      )}
    </div>
  );
}

export function OctobotFlowchart() {
  const [selectedMode, setSelectedMode] = useState<'review' | 'normal' | 'silent'>('review');

  return (
    <div className="bg-white rounded-lg shadow-lg p-8">
      {/* Mode Toggle */}
      <div className="mb-8 text-center">
        <h3 className="mb-4">Current Bot Mode:</h3>
        <div className="flex justify-center gap-2">
          <Button 
            variant={selectedMode === 'review' ? 'default' : 'outline'}
            onClick={() => setSelectedMode('review')}
            size="sm"
          >
            Review Mode
          </Button>
          <Button 
            variant={selectedMode === 'normal' ? 'default' : 'outline'}
            onClick={() => setSelectedMode('normal')}
            size="sm"
          >
            Normal Mode
          </Button>
          <Button 
            variant={selectedMode === 'silent' ? 'default' : 'outline'}
            onClick={() => setSelectedMode('silent')}
            size="sm"
          >
            Silent Mode
          </Button>
        </div>
      </div>

      <div className="overflow-x-auto">
        <div className="min-w-[800px]">
          {/* Start */}
          <div className="flex justify-center">
            <FlowStep
              title="Employee Posts Message"
              description="Posts in #security channel for assistance"
              type="start"
              icon={<MessageCircle className="w-4 h-4" />}
            />
          </div>

          <Arrow />

          {/* Initial Bot Response */}
          <div className="flex justify-center">
            <FlowStep
              title="Octobot Stays Silent"
              description="No response in #security channel"
              type="process"
              variant="warning"
              icon={<Bot className="w-4 h-4" />}
            />
          </div>

          <Arrow />

          {/* Alert Security */}
          <div className="flex justify-center">
            <FlowStep
              title="Alert Security Agents"
              description="Notification sent to #octobot-agent_security"
              type="process"
              icon={<Shield className="w-4 h-4" />}
            />
          </div>

          <Arrow />

          {/* Mode-specific flow */}
          {selectedMode === 'review' && (
            <>
              <div className="flex justify-center">
                <FlowStep
                  title="Review Mode Active"
                  description="Formulates response and requests review"
                  type="process"
                  variant="warning"
                  icon={<Edit3 className="w-4 h-4" />}
                />
              </div>

              <Arrow />

              <div className="flex justify-center">
                <FlowStep
                  title="Security Approval?"
                  description="Agent reviews and decides"
                  type="decision"
                  variant="warning"
                />
              </div>

              <div className="flex justify-center gap-16 mt-8">
                {/* Approved path */}
                <div className="flex flex-col items-center">
                  <Badge variant="default" className="mb-4">Approved</Badge>
                  <FlowStep
                    title="Click Approve"
                    description="Security agent approves message"
                    type="process"
                    variant="success"
                    icon={<CheckCircle className="w-4 h-4" />}
                  />
                  <Arrow />
                  <FlowStep
                    title="Octobot Replies"
                    description="Responds to original poster in #security"
                    type="process"
                    variant="success"
                    icon={<Bot className="w-4 h-4" />}
                  />
                </div>

                {/* Not approved path */}
                <div className="flex flex-col items-center">
                  <Badge variant="destructive" className="mb-4">Not Approved</Badge>
                  <FlowStep
                    title="Manual Response"
                    description="Security agent responds manually from agent channel"
                    type="process"
                    variant="destructive"
                    icon={<XCircle className="w-4 h-4" />}
                  />
                  <Arrow />
                  <FlowStep
                    title="Octobot Goes Silent"
                    description="Bot stays quiet until tagged"
                    type="process"
                    variant="destructive"
                    icon={<Bot className="w-4 h-4" />}
                  />
                </div>
              </div>
            </>
          )}

          {selectedMode === 'normal' && (
            <>
              <div className="flex justify-center">
                <FlowStep
                  title="Normal Mode Active"
                  description="Bot responds automatically to posts"
                  type="process"
                  variant="success"
                  icon={<Bot className="w-4 h-4" />}
                />
              </div>

              <Arrow />

              <div className="flex justify-center">
                <FlowStep
                  title="Auto Response"
                  description="Responds to every post (intelligently filters non-questions)"
                  type="process"
                  variant="success"
                  icon={<MessageCircle className="w-4 h-4" />}
                />
              </div>
            </>
          )}

          {selectedMode === 'silent' && (
            <>
              <div className="flex justify-center">
                <FlowStep
                  title="Silent Mode Active"
                  description="Bot only responds when tagged"
                  type="process"
                  variant="destructive"
                  icon={<Bot className="w-4 h-4" />}
                />
              </div>

              <Arrow />

              <div className="flex justify-center">
                <FlowStep
                  title="Wait for Tag"
                  description="Only responds when explicitly mentioned"
                  type="process"
                  variant="destructive"
                  icon={<MessageCircle className="w-4 h-4" />}
                />
              </div>
            </>
          )}

          {/* Knowledge Management Section */}
          <div className="mt-12 pt-8 border-t-2 border-gray-200">
            <h3 className="text-center mb-6 text-lg font-semibold">Post-Resolution Knowledge Management</h3>
            
            <div className="flex justify-center">
              <FlowStep
                title="Thread Resolved"
                description="Issue has been addressed"
                type="end"
                variant="success"
                icon={<CheckCircle className="w-4 h-4" />}
              />
            </div>

            <Arrow />

            <div className="flex justify-center gap-16">
              <div className="flex flex-col items-center">
                <Badge variant="default" className="mb-4">✍️ Learn</Badge>
                <FlowStep
                  title="React with ✍️"
                  description="Bot learns from thread"
                  type="process"
                  variant="success"
                  icon={<Edit3 className="w-4 h-4" />}
                />
                <Arrow />
                <FlowStep
                  title="Create Knowledge Article"
                  description="Added to Risotto KB"
                  type="end"
                  variant="success"
                />
              </div>

              <div className="flex flex-col items-center">
                <Badge variant="destructive" className="mb-4">⏏️ Unlearn</Badge>
                <FlowStep
                  title="React with ⏏️"
                  description="Bot forgets thread"
                  type="process"
                  variant="destructive"
                  icon={<Trash2 className="w-4 h-4" />}
                />
                <Arrow />
                <FlowStep
                  title="Remove from Memory"
                  description="Thread forgotten"
                  type="end"
                  variant="destructive"
                />
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Legend */}
      <div className="mt-8 p-4 bg-gray-50 rounded-lg">
        <h4 className="font-semibold mb-2">Legend:</h4>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          <div className="flex items-center gap-2">
            <div className="w-4 h-4 bg-blue-50 border-2 border-blue-300 rounded"></div>
            <span>Normal Process</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="w-4 h-4 bg-yellow-50 border-2 border-yellow-300 rounded"></div>
            <span>Review Required</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="w-4 h-4 bg-green-50 border-2 border-green-300 rounded"></div>
            <span>Success/Approved</span>
          </div>
          <div className="flex items-center gap-2">
            <div className="w-4 h-4 bg-red-50 border-2 border-red-300 rounded"></div>
            <span>Blocked/Silent</span>
          </div>
        </div>
      </div>
    </div>
  );
}
